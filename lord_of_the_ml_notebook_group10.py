# -*- coding: utf-8 -*-
"""Lord_of_the_ML_notebook_group10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hOJP-Wsbu_pfS9dQYZTQgmaBqdccI7MG
"""

import pandas as pd
import openpyxl as op
import seaborn as sns
from scipy import stats
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import PolynomialFeatures
import sklearn.metrics as metrics
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

wb = op.load_workbook("/content/train.xlsx")
ws = wb.active
data = ws.values 
columns = next(data)[0:]
df = pd.DataFrame(data,columns = columns)
df.head()

sns.boxplot(x='WorkMethodsFrequencyLogisticRegression', y='JobSatisfaction', data= df,order=["Rarely", "Sometimes", "Often","Most of the time"]).set_title("Box Plot of WorkMethodsFrequencyLogisticRegression & JobSatisfaction")

sns.boxplot(x='WorkMethodsFrequencyDataVisualization', y='JobSatisfaction', data= df,order=["Rarely", "Sometimes", "Often","Most of the time"]).set_title("Box Plot of WorkMethodsFrequencyDataVisualization	 & JobSatisfaction")

sns.boxplot(x='WorkMethodsFrequencyDecisionTrees', y='JobSatisfaction', data= df).set_title("Box Plot of WorkMethodsFrequencyDecisionTrees & JobSatisfaction ")

print("Shape of dataset: ", df.shape )
print("Column names: ", df.columns)

df.nunique(axis=0)

df.describe().style.set_precision(2)

import matplotlib.pyplot as plt
import seaborn as sns

# matplotlib histogram
plt.hist(df['JobSatisfaction'], color = 'blue', edgecolor = 'black',
         bins = int(180/5))

# seaborn histogram
sns.distplot(df['JobSatisfaction'], hist=True, kde=False, 
             bins=int(180/5), color = 'blue',
             hist_kws={'edgecolor':'black'})
# Add labels
plt.title('Histogram of Job Satisfaction')
plt.xlabel('Job Satisfaction')

df['JobSatisfaction'].value_counts(normalize=True) * 100

df.RemoteWork.unique()

df.isnull().values.any()

df.isna().sum()

SatisfactionbyEmployment = df.groupby(by="WorkMethodsFrequencyRandomForests").mean()["JobSatisfaction"].sort_values(ascending=False)[:15]
print(SatisfactionbyEmployment)
SatisfactionbyEmployment.plot(kind="barh", color="green")
plt.xlabel("Satisfaction")
plt.title("Job Satisfaction by Employment Status")
plt.show()

df.dtypes

df = df[~df.JobSatisfaction.isnull()].copy()

df = df.apply(lambda x: x.fillna(x.mean()) if x.dtype.kind in 'biufc' else x.fillna(x.mode()[0]))

df.isna().sum()

sns.boxplot(x=df['Age'])

sns.boxplot(x=df['CompensationScore'])

threshold = 3
z = np.abs(stats.zscore(df['Age']))
arr = np.where(z > 3)
print(arr[0].size)
print(z)

for i in range(arr[0].size):
    if not ( 5 < df['Age'][arr[0][i]] < 80 ):
        df.drop([arr[0][i]],inplace=True)

df.iloc[:,12:19].head()

df1 = df.iloc[:, 12:19]
for column in df1:
    df[column] = LabelEncoder().fit_transform(df[column])
df.iloc[:,12:19].head()

print(df.iloc[:,30:48].head())

custom_mapping = {'Rarely': 0, 'Sometimes': 1, 'Often': 2, 'Most of the time': 3}
df2 = df.iloc[:, 30:48]
for column in df2:
    df[column] = df[column].map(custom_mapping)
print(df.iloc[:,30:48])

sns.boxplot(x='WorkMethodsFrequencyDecisionTrees', y='JobSatisfaction', data= df).set_title("Box Plot of WorkMethodsFrequencyDecisionTrees & JobSatisfaction ")

custom_mapping2 = {'3 to 5 years':3, '1 to 2 years':2, '6 to 10 years':4,
       'More than 10 years':5, 'Less than a year':1,
       "I don't write code to analyze data":0}
df['Tenure'] = df['Tenure'].map(custom_mapping2)

c_m3 = {'51-75% of projects':4, '100% of projects':6, '10-25% of projects':2,
       '76-99% of projects':5, 'Less than 10% of projects':1,
       '26-50% of projects':3, 'None':0}
df['WorkDataVisualizations'] = df['WorkDataVisualizations'].map(c_m3)

df.dtypes

custom_mapping = { 0:'Rarely',1: 'Sometimes',2: 'Often',3: 'Most of the time'}
df["WorkMethodsFrequencyDecisionTrees"]=df["WorkMethodsFrequencyDecisionTrees"].map(custom_mapping)
print(df["WorkMethodsFrequencyDecisionTrees"])

sns.boxplot(x='WorkMethodsFrequencyDecisionTrees', y='JobSatisfaction', data= df).set_title("Box Plot of WorkMethodsFrequencyDecisionTrees & JobSatisfaction ")

sns.boxplot(x='WorkMethodsFrequencyRandomForests', y='JobSatisfaction', data= df).set_title("Box Plot of WorkMethodsFrequencyRandomForests & JobSatisfaction ")

sns.boxplot(x='WorkMethodsFrequencyLogisticRegression', y='JobSatisfaction', data= df).set_title("Box Plot of WorkMethodsFrequencyLogisticRegression & JobSatisfaction")

sns.boxplot(x='WorkChallengeFrequencyExplaining', y='JobSatisfaction', data= df).set_title("Box Plot of WorkChallengeFrequencyExplaining & JobSatisfaction ")

dfr = df[['WorkChallengeFrequencyPolitics', 'WorkChallengeFrequencyUnusedResults', 'WorkChallengeFrequencyDirtyData',
        'WorkChallengeFrequencyExplaining', 'WorkChallengeFrequencyTalent','WorkChallengeFrequencyClarity', 'WorkChallengeFrequencyDataAccess','JobSatisfaction' ]]

corr_matrix=dfr.corr()
ax = plt.axes()
sns.heatmap(corr_matrix,cmap="Greens",vmin=0, vmax=0.3)
ax.set_title('Heat Map of Work Challenge Frequencies & Job Satisfaction')
plt.show()

dfr = df[['WorkMethodsFrequencyCross-Validation', 'WorkMethodsFrequencyDataVisualization', 'WorkMethodsFrequencyDecisionTrees',
        'WorkMethodsFrequencyLogisticRegression', 'WorkMethodsFrequencyNeuralNetworks','WorkMethodsFrequencyPCA', 'WorkMethodsFrequencyRandomForests' , 'WorkMethodsFrequencyTimeSeriesAnalysis','JobSatisfaction' ]]

corr_matrix=dfr.corr()
ax = plt.axes()
sns.heatmap(corr_matrix,vmin=0, vmax=0.1)
ax.set_title('Heat Map of Work Method Frequencies & Job Satisfaction')
plt.show()

corr_matrix=df.corr()
ax = plt.axes()
sns.heatmap(corr_matrix,vmin=0, vmax=0.1)
ax.set_title('Heat Map of Correlation Matrix of All Features')
plt.show()

sns.heatmap(corr_matrix)

dfr = df[['LearningPlatformUsefulnessBlogs', 'LearningPlatformUsefulnessKaggle', 'LearningPlatformUsefulnessCourses',
        'LearningPlatformUsefulnessProjects', 'LearningPlatformUsefulnessSO','LearningPlatformUsefulnessTextbook', 'LearningPlatformUsefulnessYouTube', 'JobSatisfaction' ]]

corr_matrix=dfr.corr()
ax = plt.axes()
sns.heatmap(corr_matrix,vmin=0, vmax=0.05)
ax.set_title('Heat Map of Learning Platform Usefulness & Job Satisfaction')
plt.show()